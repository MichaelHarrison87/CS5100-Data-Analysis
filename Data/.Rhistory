dummyDistances = cbind(distances, c(1:length(distances)))
dummyDistances <- as.data.frame(dummyDistances)
colnames(dummyDistances) <- c("Distance", "Index")
minDistToUse = data.frame(distances=double()
,index = double())
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
}
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
minDistToUse
k
k=3
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
warnings()
minDistItems
dummyDistances = cbind(distances, c(1:length(distances)))
dummyDistances <- as.data.frame(dummyDistances)
colnames(dummyDistances) <- c("Distance", "Index")
minDistToUse = data.frame(distances=double()
,index = double())
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
minDistItems
minDistToUse
getNN_Indiv(xtrain, xtest[2,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=1)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=3)
xtest[2,]
knn(xtrain, xtest[2,], ytrain, k=1)
knn(xtrain, xtest[2,], ytrain, k=2)
knn(xtrain, xtest[2,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[1,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=1)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=3)
xtest[3,]
xtrain
ytrain
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=1)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=3)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest, ytrain, k=2)
NN(xtrain, xtest, ytrain, k=2)
knn(xtrain, xtest, ytrain, k=1)
NN(xtrain, xtest, ytrain, k=1)
NN(xtrain, xtest, ytrain, k=1)
knn(xtrain, xtest, ytrain, k=1)
knn(xtrain, xtest, ytrain, k=3)
NN(xtrain, xtest, ytrain, k=3)
xtrain
ytrain
iris
head(iris)
iris.X.train <- iris[,1:4]
iris.X.train
iris.X.train <- iris[1:149,1:4]
iris.Y.train <- iris[1:149,5]
iris.X.test <- iris[150,1:4]
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
NN(iris.X.train, iris.X.test, iris.Y.train, k=3)
iris.X.train <- iris[1:145,1:4]
iris.Y.train <- iris[1:145,5]
iris.X.test <- iris[146:150,1:4]
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
knn(iris.X.train, iris.X.test, iris.Y.train, k=2)
knn(iris.X.train, iris.X.test, iris.Y.train, k=5)
knn(iris.X.train, iris.X.test, iris.Y.train, k=10)
knn(iris.X.train, iris.X.test, iris.Y.train, k=20)
knn(iris.X.train, iris.X.test, iris.Y.train, k=30)
knn(iris.X.train, iris.X.test, iris.Y.train, k=50)
knn(iris.X.train, iris.X.test, iris.Y.train, k=50)
NN(iris.X.train, iris.X.test, iris.Y.train, k=50)
warnings()
iris.X.train <- iris[1:50,1:4]
iris.Y.train <- iris[1:50,5]
iris.X.test <- iris[71:80,1:4]
knn(iris.X.train, iris.X.test, iris.Y.train, k=5)
NN(iris.X.train, iris.X.test, iris.Y.train, k=5)
length(knn(iris.X.train, iris.X.test, iris.Y.train, k=5))
length(NN(iris.X.train, iris.X.test, iris.Y.train, k=5))
knn(iris.X.train, iris.X.test, iris.Y.train, k=15)
knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
fix(iris)
set.seed(1)
iris.random = sample(iris, nrow(iris), replace=FALSE)
iris.random = sample(iris, nrow(iris))
sample(iris,1)
sample(c(1:nrow(iris)),nrow(iris))
iris.new <- iris[sample(c(1:nrow(iris)),nrow(iris)),]
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
fix(iris.new)
iris.X.train <- iris.new[1:50,1:4]
iris.Y.train <- iris.new[1:50,5]
iris.X.test <- iris.new[71:80,1:4]
iris.Y.train
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
M<-NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
R==M
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
R==<
R==M
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=10)
R==M
R
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=50)
R
R==<
R==M
M<-NN(iris.X.train, iris.X.test, iris.Y.train, k=50)
R==M
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=25)
M<-NN(iris.X.train, iris.X.test, iris.Y.train, k=25)
R==M
?knn
??knn
setwd("~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Data")
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
crim01
mpg01
mpg01
Auto
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
coeffsAll
Auto
mpg01
Auto.varsToUse
v
Auto[,v]
length(Auto[,v])
length(mpg01)
dim(Auto)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Test.Error
table(Test.Actual, Test.Pred)
(13+14)/(82+14+13+89)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Test.Error
Boston
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Train
dim(Boston.Train)
dim(Boston.Test)
sum(Boston.Test$mpg01)
sum(Boston.Train$mpg01)
sum(Boston$mpg01)
Boston
sum(Boston.Test$crim01)
sum(Boston.Train$crim01)
sum(Boston$crim01)
120+133
summary(logistic.crim.sig3)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Test.Pred
Test.Probs
min(Test.Probs)
max(Test.Probs)
length(Test.Probs)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
Boston.Test.Pred
Boston.Test.Actual
table(Boston.Test.Actual,Boston.Test.Pred)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
logistic.crim.sig3
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
dim(Boston.Train)
dim(Boston.Test)
dim(Boston)
Boston.Test.Error
lm.crim.all
summary(lm.crim.all)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
plot(crim,age)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
plot(age,crim)
plot(nox,crim)
plot(age,crim01)
plot(medv,crim01)
plot(nox,crim01)
pairs(Boston)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
plot(Boston.Train$nox, Boston.Train$crim)
summary(logistic.crim.sig3)
curve(predict(logistic.crim.sig3, data.frame(Boston.Train$crim01=x), type="resp"),
add=TRUE, col="red")
curve(predict(logistic.crim.sig3, data.frame(Boston.Train$crim01=x), type="resp"), add=TRUE, col="red")
curve(predict(logistic.crim.sig3, data.frame(Boston.Train$crim01), type="resp"), add=TRUE, col="red")
curve(predict(logistic.crim.sig3, data.frame(Boston.Train$nox=x), type="resp"), add=TRUE, col="red")
curve(predict(logistic.crim.sig3), data.frame(Boston.Train$nox=x), type="resp"), add=TRUE, col="red")
predict(logistic.crim.sig3, type="resp")
curve(predict(logistic.crim.sig3, type="resp"), add=TRUE, col="red")
dat <- structure(list(Response = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L,
0L, 0L), Temperature = c(29.33, 30.37, 29.52, 29.66, 29.57, 30.04,
30.58, 30.41, 29.61, 30.51, 30.91, 30.74, 29.91, 29.99, 29.99,
29.99, 29.99, 29.99, 29.99, 30.71, 29.56, 29.56, 29.56, 29.56,
29.56, 29.57, 29.51)), .Names = c("Response", "Temperature"),
class = "data.frame", row.names = c(NA, -27L))
temperature.glm <- glm(Response ~ Temperature, data=dat, family=binomial)
plot(dat$Temperature, dat$Response, xlab="Temperature",
ylab="Probability of Response")
curve(predict(temperature.glm, data.frame(Temperature=x), type="resp"),
add=TRUE, col="red")
# To add an additional curve, e.g. that which corresponds to 'Set 1':
curve(plogis(-88.4505 + 2.9677*x), min(dat$Temperature),
max(dat$Temperature), add=TRUE, lwd=2, lty=3)
legend('bottomright', c('temp.glm', 'Set 1'), lty=c(1, 3),
col=2:1, lwd=1:2, bty='n', cex=0.8)
predict(temperature.glm, data.frame(Temperature=x), type="resp")
data.frame(Temperature=x)
plot(dat$Temperature, dat$Response, xlab="Temperature",
+      ylab="Probability of Response")
plot(dat$Temperature, dat$Response, xlab="Temperature", ylab="Probability of Response")
curve(predict(temperature.glm, data.frame(Temperature=x), type="resp"), add=TRUE, col="red")
plot(Boston.Train$nox, Boston.Train$crim01)
curve(predict(logistic.crim.sig3, data.frame(Boston$nox=x), type="resp"), add=TRUE, col="red")
lines(predict(logistic.crim.sig3))
lines(predict(logistic.crim.sig3)~Boston.Train$nox)
lines(predict(logistic.crim.sig3)~Boston.Train$nox, col="green")
predict(logistic.crim.sig3)
length(predict(logistic.crim.sig3))
dim(Boston.Train)
lines(predict(logistic.crim.sig3, type="resp")~Boston.Train$nox, col="green")
plot(Boston.Train$nox, Boston.Train$crim01)
lines(predict(logistic.crim.sig3, type="resp")~Boston.Train$nox, col="green", lwd=2)
plot(Boston.Train$nox, Boston.Train$crim01)
lines(predict(logistic.crim.sig3, type="response")~Boston.Train$nox, col="green", lwd=2)
attach(mtcars)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
length(Boston.Test.Actual)
length(Boston.Test.Pred)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
length(Boston.Test.Pred)
length(Boston.Test.Actual)
dim(Boston.Test)
nrow(Boston.Test)
Boston.Test.Pred <- rep(0,nrow(Boston.Test))
Boston.Test.Probs <- predict(logistic.crim.sig3, type="response", newdata=Boston.Test)
Boston.Test.Pred[Test.Probs>=0.5] <- 1
length(Boston.Test.Pred)
length(Boston.Test.Probs)
length(Boston.Test.Pred)
Boston.Test.Pred <- rep(0,nrow(Boston.Test))
Boston.Test.Pred
length(Boston.Test.Pred)
Boston.Test.Pred <- rep(0,nrow(Boston.Test))
Boston.Test.Probs <- predict(logistic.crim.sig3, type="response", newdata=Boston.Test)
Boston.Test.Pred[Test.Probs>=0.5] <- 1
Boston.Test.Actual <- Boston.Test$crim01
Boston.Test.Error <- mean(Boston.Test.Actual!=Boston.Test.Pred)
Boston.Test.Pred
length(Boston.Test.Pred)
Boston.Test.Pred <- rep(0,nrow(Boston.Test))
Boston.Test.Probs <- predict(logistic.crim.sig3, type="response", newdata=Boston.Test)
length(Boston.Test.Pred)
length(Boston.Test.Probs)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
summary(logistic.crim.sig3)
colToUse
varsToUseToUse
varsToUse
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
a <- glm(Boston.Train$crim01 ~ Boston.Train$medv, family = binomial
)
summary(a)
summary(logistic.crim.sig3)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Test.Error
logistic.crim.sig3
summary(logistic.crim.sig3)
=1
k=1
knn.crim <- knn(Boston.Train[,-c("crim","crim01")],Boston.Test[,-c("crim","crim01")], Boston.Train$crim01, k)
Boston.Train[,-crim]
Boston.Train[,.-crim]
Boston.Train[,crim]
Boston.Train[,"crim"]
Boston.Train[,c("crim","crim01")]
dim(Boston.Train[,c("crim","crim01")])
dim(Boston.Train[,-c("crim","crim01")])
subset(Boston.Train, select = -c("crim","crim01"))
subset(Boston.Train, select = -c(crim,crim01))
dim(subset(Boston.Train, select = -c(crim,crim01)))
Boston.Train[, -c(crim,crim01)]
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
Boston.Train.X.knn <- as.matrix(subset(Boston.Train, select = -c(crim,crim01)))
Boston.Test.X.knn <- as.matrix(subset(Boston.Test, select = -c(crim,crim01)))
Boston.Train.Y.knn <- as.matrix(Boston.Train$crim01)
knn.crim <- knn(Boston.Train.X.knn,Boston.X.Test.knn, Boston.Train.Y.knn, k)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
knn.crim
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
knn.crim
summary(knn.crim)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Week 3 Exercises.R')
predict(logistic.crim)
sort(predict(logistic.crim))
logistic.crim.test <- glm(crim01~nox, data=Boston, family = binomial)
summary(logistic.crim.test)
plot(crim01~nox)
predict(logistic.crim)
lines(predict(logistic.crim))
curve(predict(logistic.crim,data.frame(nox=x),type="resp"),add=TRUE)
length(crim01)
length(nox)
length(predict(logistic.crim.test))
curve(predict(logistic.crim.test,data.frame(nox=x),type="resp"),add=TRUE)
curve(predict(logistic.crim.test,data.frame(nox=x),type="resp"),add=TRUE, col="red")
varToPlot <- "nox"
logistic.crim01.test <- glm(crim01 ~ Boston[,varToPlot], data=Boston, family = binomial)
plot(crim01 ~ Boston[,varToPlot])
curve(predict(logistic.crim01.test, data.frame(Boston[,varToPlot]=x), type="resp"), add=TRUE, col="red")
varToPlot <- "nox"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot)
curve(predict(logistic.crim.test,data.frame(nox=x),type="resp"),add=TRUE, col="red")
curve(predict(logistic.crim.test,data.frame(xToPlot=x),type="resp"),add=TRUE, col="red")
curve(predict(logistic.crim.test,data.frame(c(xToPlot)=x),type="resp"),add=TRUE, col="red")
xToPlot
nox
xToPlot==nox
all.equal(xToPlot,nox)
type(nox)
class(nox)
class(xToPlot)
typeof(nox)
typeof(xToPlot)
curve(predict(logistic.crim.test,data.frame(nox=x),type="resp"),add=TRUE, col="red")
curve(predict(logistic.crim.test,data.frame(xToPlot=x),type="resp"),add=TRUE, col="red")
xToPlot
curve(predict(logistic.crim01.test,data.frame(xToPlot=x),type="resp"),add=TRUE, col="red")
curve(predict(logistic.crim01.test,data.frame(xToPlot=x),type="resp"),add=TRUE, col="red")
varToPlot <- "nox"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot)
curve(predict(logistic.crim01.test, data.frame(xToPlot=x), type="resp"), add=TRUE, col="red")
varToPlot <- "nox"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot)
curve(predict(logistic.crim01.test, data.frame(xToPlot=x), type="resp"), add=TRUE, col="red", xlab=varToPlot, ylab="crim01")
varToPlot <- "nox"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot, xlab=varToPlot, ylab="crim01")
curve(predict(logistic.crim01.test, data.frame(xToPlot=x), type="resp"), add=TRUE, col="red")
varToPlot <- "medv"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot, xlab=varToPlot, ylab="crim01")
curve(predict(logistic.crim01.test, data.frame(xToPlot=x), type="resp"), add=TRUE, col="red")
# Fit & Plot Logistic Regression
varToPlot <- "dis"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot, xlab=varToPlot, ylab="crim01")
curve(predict(logistic.crim01.test, data.frame(xToPlot=x), type="resp"), add=TRUE, col="red")
varToPlot <- "rad"
xToPlot <- Boston[,varToPlot]
logistic.crim01.test <- glm(crim01 ~ xToPlot, data=Boston, family = binomial)
plot(crim01 ~ xToPlot, xlab=varToPlot, ylab="crim01")
curve(predict(logistic.crim01.test, data.frame(xToPlot=x), type="resp"), add=TRUE, col="red")
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Logistic Regression Plot - Example.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Logistic Regression Plot - Example.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Logistic Regression Plot - Example.R')
names(Boston)
names(Boston)[-crim]
names(Boston)[crim]
names(Boston)[-crim]
names(Boston)[-"crim"]
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Logistic Regression Plot - Example.R')
Boston.varsToUse
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Logistic Regression Plot - Example.R')
Boston.varsToUse
source('~/01 MSc Machine Learning/01 Term 1/CS5100 Data Analysis/Week 3/Logistic Regression Plot - Example.R')
